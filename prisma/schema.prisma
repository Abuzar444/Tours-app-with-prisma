// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  password  String
  // emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // image         String?
  // accounts      Account[]
  // sessions      Session[]
  // tours     Tours[]
}

model Tours {
  id        String   @id @default(uuid())
  name      String
  price     Int
  image     String
  info      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // users     Users @relation(fields: [tourId], references: [id], onDelete: Cascade)
  // tourId    String
}

// model Account {
//   id                 String  @id @default(uuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_acount_id")
//   refrest_token      String?
//   access_token       String?
//   exprires_at        Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   ouath_token        String?
//   users              Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(uuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
